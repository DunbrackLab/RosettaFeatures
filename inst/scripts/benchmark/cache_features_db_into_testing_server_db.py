#!/usr/bin/env python
# :noTabs=true:
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta software suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.


##################################################################################
# Usage:                                                                         #
#   cache_features_db_into_testing_server_db.py _arguments.py features_ss_id.db3 #
#                                                                                #
#   * _arguments.py: python map of variables generated by cluster.py             #
#   * features_ss_id.db3: database to be stored in the testing server database   #
#                                                                                #
#                                                                                #
#  Cache features_ss_id.db3 to testing server database:                          #
#                                                                                #
#   * features_scientific_benchmark.features_database                            #
#      -> store identifying information for each features database               #
#                                                                                #
#   * features_scientific_benchmark.features_database_parts                      #
#      -> store contents of each features database in 10meg parts                #
#                                                                                #
##################################################################################

import fnmatch, os, re, subprocess, sys

def add_features_db_data(mvars, features_db_fname):

    mvars["features_db_fname"] = features_db_fname.split("/")[-1]

    # TODO: get schema version from features database
    mvars["schema_version"] = int(1)

    m = re.search("features_(\w*)_(\d{6}).db3", features_db_fname) 
    mvars["sample_source_id"] = m.group(1)
    mvars["date_code"] = m.group(2)
    return mvars

def compress_file(fname, extension=".tar.gz"):
    compressed_fname = fname+extension

    print "Compressing '%s' -> '%s'..." % (fname, compressed_fname)
    p = subprocess.Popen(args=['tar', '-czf', compressed_fname, fname])
    p.wait()
    print "Done compressing"
    return compressed_fname

def split_file(fname, size="10m"):
    # split fname into 10meg pieces: fname_???
    # Later, join the files together like this: cat fname_* > fname

    def get_parts(fname):
        head, tail = os.path.split(fname)
        return fnmatch.filter(os.listdir(head), tail+"_???")
    
    for part_fname in get_parts(fname):
        if os.path.exists(part_fname): os.remove(part_fname)

    p = subprocess.Popen(['split', '-a', '3', '-b', size, fname, fname+"_???"])
    p.wait()
    return get_parts(fname)

def insert_features_db_parts_into_database(
    features_db_fname, part_fnames, mvars):
    
    sample_source_stmt_template = '''
INSERT INTO features_scientific_benchmark.features_database VALUES (
    key=NULL,
    id=%(sample_source_id)s,
    date_code=%(date_code)s,
    rosetta_revision=%(svn_revision)s,
    schema_version=%(schema_version)s,
    features_db_fname=%(features_db_fname)s);
'''
    print mvars
    stmt = sample_source_stmt_template % mvars
    print "Write to the test database:%s" % stmt
    ##############################################################
    # Sergey, write code to write stmt to testing sever database #
    #                                                            #
    ##############################################################

    # Get the last AUTO_INCREMENT 'id' key
    mvars["feature_db_key"] = 0 # mysql_insert_id()

    sample_source_parts_stmt_template = '''
INSERT INTO features_scientific_benchmark.features_database_parts VALUES (
    features_db_key=%(feature_db_key)s,
    part_fname=%(part_fname)s,
    part_file_contents=%(part_file_contents)s);
'''

    for part_fname in part_fnames:
        mvars["part_fname"] = part_fname
        mvars["part_file_contents"] = open(part_fname, 'rb').read()
        stmt = sample_source_parts_stmt_template % mvars
        ###############################################################
        # Sergey, write code to write stmt to testing server database #
        #                                                             #
        ###############################################################

def cache_features_db(mvars, features_db_fname):

    mvars = add_features_db_data(mvars, features_db_fname)
    
    compressed_fname = compress_file(features_db_fname)
    
    part_fnames = split_file(compressed_fname)
    os.remove(compressed_fname)
    
    insert_features_db_parts_into_database(features_db_fname, part_fnames, mvars)
    map(os.remove, part_fnames)

if __name__ == "__main__":
    mvars = eval(file(sys.argv[1]).read())
    features_db_fname = sys.argv[2] 
    cache_features_db(mvars, features_db_fname)
